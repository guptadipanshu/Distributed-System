/**********************************
 * FILE NAME: MP2Node.h
 *
 * DESCRIPTION: MP2Node class header file
 **********************************/

#ifndef MP2NODE_H_
#define MP2NODE_H_

/**
 * Header files
 */
#include "stdincludes.h"
#include "EmulNet.h"
#include "Node.h"
#include "HashTable.h"
#include "Log.h"
#include "Params.h"
#include "Message.h"
#include "Queue.h"

/**
 * CLASS NAME: MP2Node
 *
 * DESCRIPTION: This class encapsulates all the key-value store functionality
 * 				including:
 * 				1) Ring
 * 				2) Stabilization Protocol
 * 				3) Server side CRUD APIs
 * 				4) Client side CRUD APIs
 */
class MP2Node {
private:
	// Vector holding the next two neighbors in the ring who have my replicas
	vector<Node> hasMyReplicas;//<--?
	// Vector holding the previous two neighbors in the ring whose replicas I have
	vector<Node> haveReplicasOf;//<---?
	// Ring
	vector<Node> ring;// <----- USED in findNodes
	// Hash Table
	HashTable * ht; // <----?
	// Member representing this member
	Member *memberNode; //<-- used
	// Params object
	Params *par;	//<----?
	// Object of EmulNet
	EmulNet * emulNet; //<--- used
	// Object of Log // <---?
	Log * log;
	
	map<int,vector<int>> quroum_status; //how many acks/nacks received
	map<int,int> quroum_time;	//trans_id, time at which messgaes were send
	map<int,string> trans_key;	//cood map key=transID,value=clientKey
	map<int,string> trans_val;	//cood map key=transID,value=clientVal
	int trans_status[3000];		//status of trans 5=incomplete,-1=not expected a reply
	map<string,int> trans_id;   //key=key, value=transid
	int trans_type[3000];
	vector<string> node_keys;
public:
	MP2Node(Member *memberNode, Params *par, EmulNet *emulNet, Log *log, Address *addressOfMember);
	Member * getMemberNode() {
		return this->memberNode;
	}

	// ring functionalities
	void updateRing();
	vector<Node> getMembershipList();
	size_t hashFunction(string key);
	void findNeighbors();

	// client side CRUD APIs
	void clientCreate(string key, string value);
	void clientRead(string key);
	void clientUpdate(string key, string value);
	void clientDelete(string key);

	// receive messages from Emulnet
	bool recvLoop();
	static int enqueueWrapper(void *env, char *buff, int size);

	// handle messages from receiving queue
	void checkMessages();

	// coordinator dispatches messages to corresponding nodes
	void dispatchMessage(Message message,int recv_index);

	// find the addresses of nodes that are responsible for a key
	vector<Node> findNodes(string key);

	// server
	bool createKeyValue(string key, string value, ReplicaType replica);
	string readKey(string key);
	bool updateKeyValue(string key, string value, ReplicaType replica);
	bool deletekey(string key);
	vector<Node> getMyAddress();
	// stabilization protocol - handle multiple failures
	void stabilizationProtocol(vector<Node> currMemList);
	/******Helper Functions added by me*******/
	void sendReply(int transID,bool result,Address fromAddr);
	int get_quorum(bool result,int transID);
	void printRing();
	void sendReadReply(int transID,string result,Address fromAddr);
	void updateMyreplicas(string key,string value,ReplicaType replica);
	void deleteKeyValHelper(string key,Node node);
	void reinsertKeyVal(string key,string value , Node node,int replica);
	void get_readReplyquorum(string value,int transID);
	~MP2Node();
};

#endif /* MP2NODE_H_ */
